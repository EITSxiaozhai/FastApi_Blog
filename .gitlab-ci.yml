stages:
  - build
  - test
  - deploy
  - clean

Fastapi_image_build:
  stage: build
  script:
    - echo "FastApi build, Dockerfile:"
    - cat Dockerfile
    - docker build  -t fastapi:$CI_PIPELINE_ID .

Vue3_image_build:
  stage: build
  script:
    - echo "Vue build, Dockerfile:"
    - cd blogvuets
    - cat Dockerfile
    - docker build -t vue:$CI_PIPELINE_ID .

Vue2_admin_image_build:
  stage: build
  script:
    - echo "Vue build, Dockerfile:"
    - cd vue-element-admin-master
    - cat Dockerfile
    - docker build -t vue2:$CI_PIPELINE_ID .


# code_test:
#   stage: test
#   script:
#     - cd app
#     - cat main.py



Fastapi_deploy_test:
  stage: test
  script:
    - docker run -d -p 80 --name myfastapi-test-$CI_PIPELINE_ID fastapi:$CI_PIPELINE_ID
    - sleep 10 && curl $(ip add show  eth0 | grep "inet " | sed -e 's/.* inet //g' | sed -e 's/ .*//g'):$(docker port myfastapi-test-$CI_PIPELINE_ID | grep 0.0.0 | grep "8999/tcp" |  sed -e 's/.*://g')
    - docker stop myfastapi-test-$CI_PIPELINE_ID
    - docker rm myfastapi-test-$CI_PIPELINE_ID

Vue2_admin_deploy_test:
  stage: test
  script:
    - docker run -d -p 5174 --name vue2admin$CI_PIPELINE_ID vue2:$CI_PIPELINE_ID
    - docker stop vue2admin$CI_PIPELINE_ID
    - docker rm vue2admin$CI_PIPELINE_ID

Vue_deploy_test:
  stage: test
  script:
    - docker run -d -p 5173 --name myvue-test-$CI_PIPELINE_ID vue:$CI_PIPELINE_ID
    - docker stop myvue-test-$CI_PIPELINE_ID
    - docker rm myvue-test-$CI_PIPELINE_ID




Fastapi_container_deploy1:
    stage: deploy
    script:
      - printenv DB_PASSWORD
      - x=$(docker ps -f "publish=49200" | awk '{print $1}'| sed -n '2p')
      - docker stop $x && docker rm $x
      - export Sql_URL="mysql+asyncmy://$DB_USERNAME:$DB_PASSWORD@$DB_HOSTNAME:$DB_PORT/$DB_NAME?charset=utf8mb4"
      - docker run -d -p 49200:80 --name myfastapi-w1-$CI_PIPELINE_ID -e "ADMIN_RECAPTCHA_SECRET_KEY=$ADMIN_RECAPTCHA_SECRET_KEY" -e "GENERAL_USER_RECAPTCHA_SECRET_KEY=$GENERAL_USER_RECAPTCHA_SECRET_KEY" -e "DB_USERNAME=$DB_USERNAME" -e "DB_PASSWORD=$DB_PASSWORD" -e "DB_HOSTNAME=$DB_HOSTNAME" -e "DB_PORT=$DB_PORT" -e "DB_NAME=$DB_NAME" -e "REDIS_DB_PASSWORD=$REDIS_DB_PASSWORD" -e "REDIS_DB_HOSTNAME=$REDIS_DB_HOSTNAME" -e "REDIS_DB_PORT=$REDIS_DB_PORT" -e "REDIS_DB_NAME=$REDIS_DB_NAME" -e "REDIS_USER_NAME=$REDIS_USER_NAME"  -e "ACCESS_KEY_ID=$ACCESS_KEY_ID" -e "ACCESS_KEY_SECRET=$ACCESS_KEY_SECRET" -e "SECRET_KEY=$SECRET_KEY"   -e "USER_SECRET_KEY=$USER_SECRET_KEY" -e "SMTPSERVER=$SMTPSERVER"  -e "SMTPUSER=$SMTPUSER" -e "SMTPPASSWORD=$SMTPPASSWORD" -e  "MQ_HOSTNAME=$MQ_HOSTNAME" -e "MQ_USERNAME=$MQ_USERNAME" -e "MQ_USERPASSWORD=$MQ_USERPASSWORD" -e "MQ_DBNAME=$MQ_DBNAME" -e "MQ_DBPORT=$MQ_DBPORT"  -e "LogStathIP=$LogStathIP" fastapi:$CI_PIPELINE_ID
      - docker ps

Vue_container_deploy1:
    stage: deploy
    script:
      - x=$(docker ps -f "publish=49300" | awk '{print $1}'| sed -n '2p')
      - docker stop $x && docker rm $x
      - docker run -d -p 49300:5173  --network bridge   --name myvue-w1-$CI_PIPELINE_ID   vue:$CI_PIPELINE_ID
      - docker ps

Vue2_admin_deploy1:
    stage: deploy
    script:
      - x=$(docker ps -f "publish=49400" | awk '{print $1}'| sed -n '2p')
      - docker stop $x && docker rm $x
      - docker run -d -p 49400:9526  --network bridge   --name vue2admin$CI_PIPELINE_ID   vue2:$CI_PIPELINE_ID
      - docker ps

#container_deploy2:
#    stage: deploy
#    script:
#      - docker run -d -p 10089 --name $CI_JOB_NAME-$CI_PIPELINE_ID fastapi:$CI_PIPELINE_ID
#      - docker ps


# clean_containers:
#     stage: clean
#     script:
#       - docker stop $CI_JOB_NAME-$CI_PIPELINE_ID
#       - docker rm $CI_JOB_NAME-$CI_PIPELINE_ID
      

# Create a new stage called "clean_containers" to run the docker stop and docker rm commands after all the stages. Can
# you see how this is useful? what changes does this make to your pipeline?
